#!/usr/bin/env node

/**
 * Module dependencies.
 */
const config =
  require("../server/config")[process.env.NODE_ENV || "development"];
const app = require("../server/app")(config);
const debug = require("debug")("meetup:server");
const http = require("http");
const db = require("../server/lib/db");
const { database } = require("../server/config");
const cluster = require("cluster");
const os = require("os");

const log = config.log();

const numCPUs = os.cpus().length;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

if (cluster.isMaster) {
  log.info(`Master ${process.pid} is running`);
  for (let i = 0; i < numCPUs; i += 1) {
    cluster.fork();
  }
  cluster.on("exit", (worker) => {
    log.fatal(`Worker ${worker.process.pid} just died`);
    cluster.fork();
  });
} else {
  db.connect(database.cs, process.env.NODE_ENV || "development")
    .then(() => {
      log.info("Connected to MongoDB");
      server.listen(port);
    })
    .catch((err) => log.fatal(err));
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      log.fatal(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      log.fatal(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
